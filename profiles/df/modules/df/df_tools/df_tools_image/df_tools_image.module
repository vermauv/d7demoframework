<?php
/**
 * @file
 * Code for the df_tools_image module.
 */

/**
 * Implements hook_menu().
 */
function df_tools_image_menu() {
  $items['admin/df/imagestyles'] = array(
    'page callback' => 'df_tools_image_page',
    'page arguments' => array(),
    'access arguments' => array('administer demo framework'),
  );
  return $items;
}

/**
 * Page callback to reset image styles.
 */
function df_tools_image_page() {
  if (!isset($_GET['token']) || !drupal_valid_token($_GET['token'], DRUPAL_ROOT . '/df/imagestyles')) {
    return drupal_access_denied();
  }
  return df_tools_image_seed_derivatives();
}

/**
 * Seeds image style derivatives.
 *
 * @param string $dir The root level of images
 * @param array $excludes Image styles to exclude
 * @param array $includes Image styles to include
 */
function df_tools_image_seed_derivatives($dir = '/', $excludes = array(), $includes = array()) {
  if (!module_exists("image")) {
    drupal_set_message("This script requires the image module to be enabled.", 'error');
    return;
  }

  $operations = df_tools_image_seed_derivatives_operations($dir, $excludes, $includes);

  $batch = array(
    'operations' => $operations,
    'title' => t('Image styles processing'),
    'init_message' => t('Starting image style processing'),
    'progress_message' => t('Processing image styles...'),
    'error_message' => t('An error occurred. Some or all of the image style processing has failed.'),
  );
  batch_set($batch);

  if (!drupal_is_cli()) {
    batch_process('');
  } else {
    drush_backend_batch_process();
  }
}

/**
 * Returns the operations required to seed image style derivatives.
 *
 * @param string $dir The root level of images
 * @param array $excludes Image styles to exclude
 * @param array $includes Image styles to include
 *
 * @return array Operations required to seed image derivatives
 */
function df_tools_image_seed_derivatives_operations($dir = '/', $excludes = array(), $includes = array()) {
  $operations = array();

  $extensions = array('jpeg', 'jpg', 'gif', 'png');
  $mimetypes = array('image/jpeg', 'image/jpg', 'image/gif', 'image/png');

  $dir = rtrim($dir, '/');
  if ($dir == 'public') {
    $file_pattern = "[^\/]*"; // Finds anything that does not contain "/", should be fine.
  }
  else {
    $file_pattern = $dir ? $dir . ".+" : ".+";
  }

  $regex = "^public:\/\/(" . $file_pattern . ")\.(" . implode($extensions, '|') . ")$";

  // Query the database for files that match this pattern.
  $query = db_select('file_managed', 'f')
    ->condition('filemime', $mimetypes , 'IN')
    ->condition('uri', $regex, 'REGEXP');
  $total_count = $query->countQuery()->execute()->fetchField();

  $message = format_plural($total_count,
    '1 entry is to have its image derivatives created.',
    '@count entries are to have their image derivatives created.');
  $operations[] = array('drush_log', array($message, 'success'));

  // Select the files to have derivatives created..
  $files = $query->fields('f', array('fid', 'filename', 'uri', 'timestamp'))
    ->execute()
    ->fetchAll();

  foreach (image_styles() as $name => $style) {
    if (!empty($excludes) && in_array($style['name'], $excludes)) {
      $operations[] = array('drush_log', array('Excluding ' . $name, 'success'));
      continue;
    }
    if (empty($includes[0]) || in_array($style['name'], $includes)) {
      $operations[] = array('drush_log', array('Processing ' . $name, 'success'));
      $count = 1;
      $last_progress = 0;
      foreach ($files as $file) {
        $derivative_uri = image_style_path($style['name'], $file->uri);

        if (!file_exists($derivative_uri)) {
          $operations[] = array('image_style_create_derivative', array($style, $file->uri, $derivative_uri));
        }

        $progress = round(($count / $total_count) * 100);
        if (($progress % 25 === 0 || $progress % 7 === 0) && $progress != $last_progress) {
          // If we're in the command line, print the percentage, otherwise hide it
          if (drupal_is_cli()) {
            $operations[] = array('drush_print', array('...' . $progress . '%', 0, NULL, ($progress == 100)));
          }
          $last_progress = $progress;
        }
        $count++;
      }
    }
  }
  return $operations;
}
