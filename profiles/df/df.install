<?php
/**
 * @file
 * Install, update and uninstall functions for the DF installation profile.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function df_install() {
  // Enable default theme.
  $theme = 'zurb_foundation';
  theme_enable(array($theme));
  variable_set('theme_default', $theme);

  // Enable admin theme.
  $admin_theme = 'ember';
  theme_enable(array($admin_theme));
  variable_set('admin_theme', $admin_theme);

  // Disable bartik and seven.
  theme_disable(array('bartik', 'seven'));

  // Use admin theme when editing nodes.
  variable_set('node_admin_theme', '1');

  // Enable some standard blocks.
  $default_theme = variable_get('theme_default', $theme);
  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'powered-by',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'footer_second',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Enable default permissions for system roles.
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval'));

  // Create a default role for site administrators
  // with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
}

/**
 * Implements hook_install_tasks_alter().
 */
function df_install_tasks_alter(&$tasks, $install_state) {
  global $install_state;

  // Skip profile selection step.
  $tasks['install_select_profile']['display'] = FALSE;

  // Skip language selection install step and default language to English.
  $tasks['install_select_locale']['display'] = FALSE;
  $tasks['install_select_locale']['run'] = INSTALL_TASK_SKIP;
  $install_state['parameters']['locale'] = 'en';

  // Override "install_finished" task.
  $tasks['install_finished']['function'] = 'df_install_finished';
}

/**
 * Override of install_finished().
 */
function df_install_finished(&$install_state) {
  // Flush all caches to ensure that any full bootstraps during the installer
  // do not leave stale cached data, and that any content types or other items
  // registered by the installation profile are registered correctly.
  drupal_flush_all_caches();

  // Remember the install profile in use.
  variable_set('install_profile', drupal_get_profile());

  // Installation profiles are always loaded last
  db_update('system')
    ->fields(array('weight' => 1000))
    ->condition('type', 'module')
    ->condition('name', drupal_get_profile())
    ->execute();

  // Cache a fully-built schema.
  drupal_get_schema(NULL, TRUE);

  // Run cron to populate update status tables (if available) so that users
  // will be warned if they've installed an out of date Drupal version.
  // Will also trigger indexing of profile-supplied content or feeds.
  drupal_cron_run();

  // Register static migrations via Migrate API.
  migrate_get_module_apis();

  // Remove all non-error messages.
  $messages = array('completed', 'status', 'warning', 'error');
  foreach ($messages as $message) {
    drupal_get_messages($message, TRUE);
  }

  // Turn off error reporting.
  variable_set('error_level', 0);

  // Turn off "Poor Man's Cron."
  variable_set('cron_safe_threshold', 0);

  // If user is not installing via Drush, check for additional settings.
  if (!drupal_is_cli()) {
    // Check for install profile scenario enablement.
    $scenario = variable_get('df_install_enable_dfs', 'none');
    if ($scenario != 'none' && !module_exists($scenario)) {
      // A scenario is queued for enablement.
      $path = '/admin/df/enable/' . $scenario;
      $token = drupal_get_token(DRUPAL_ROOT . '/df/enable/' . $scenario);
      drupal_goto($path, array('query' => array('token' => $token)));
    }
    else {
      // No scenario selected: default homepage.
      drupal_goto('');
    }
  }
  // Say something nice to Drush users because we like them.
  else {
    drupal_set_message(t('Thank you for installing Demo Framework!'), 'status');
  }
}

